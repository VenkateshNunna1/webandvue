<template>
  <ul>
    <li>
      <strong>NAME:</strong>{{ name }}{{ isFavorite ? "(favorite)" : "" }}
    </li>
    <button @click="toggleFavorite">toggle favorite</button>
    <button @click="toggleButton">{{ buttonContent }} Details</button>
    <ul v-if="detailsAreVisible">
      <li><strong>PHONE-NUMBER:</strong>{{ mobileNumber }}</li>
      <li><strong>EMAIL:</strong>{{ emailAddress }}</li>
      <li>{{ isFavorite }}</li>
    </ul>
    <ul v-else>
      <h1>here is the details</h1>
    </ul>
  </ul>
</template>

<script>
export default {
  // props: ["name", "mobileNumber", "emailAddress", "isFavorite"], // whenever you are adding prop to the app.vue and you have to add prop here also
  //validating props
  props: {
    id: {
      type: Number,
      required: true,
    },
    name: {
      type: String,
      required: true,
    },
    mobileNumber: {
      type: Number,
      required: true,
    },
    emailAddress: {
      type: String,
      required: true,
    },
    isFavorite: {
      type: Boolean,
      required: false,
      default: false, // default property can be use as function
      // validator: function (value) {
      //   //isFavorite will give the current value that value we are passing in the function
      //   return value === "1" || value === "0";
      // },
    },
  },
  data() {
    return {
      detailsAreVisible: false,
    };
  },
  methods: {
    toggleButton() {
      return (this.detailsAreVisible = !this.detailsAreVisible);
    },

    toggleFavorite() {
      this.$emit("toggle-favorite", this.name, this.id); //we can pass n no of parameters here
    },
    // Other methods...
  },
  computed: {
    buttonContent() {
      if (this.detailsAreVisible) {
        return "hide";
      } else {
        return "show";
      }
    },
  },
};
</script>




<template>
  <header>
    <h1>My Friends</h1>
  </header>
  <section>
    <ul>
      <friend-contact
        v-for="friend in friends"
        :key="friend.id"
        :id="friend.id"
        v-bind:name="friend.name"
        :mobile-number="friend.mobileNumber"
        :email-address="friend.email"
        :is-favorite="friend.isFavorite"
        @toggle-favorite="toggleFavoriteStatus"
      ></friend-contact>
    </ul>
  </section>
</template>

<script>
export default {
  data() {
    return {
      friends: [
        {
          id: 1,
          name: "venkatesh",
          mobileNumber: 6309875788,
          email: "venky@gamil.com",
          isFavorite: true,
        },
        {
          id: 2,
          name: "ganesh",
          mobileNumber: 9652717037,
          email: "gani@gamil.com",
          isFavorite: false,
        },
      ],
    };
  },
  methods: {
    // toggleFavoriteStatus() {
    //   alert("this works");
    // },
    toggleFavoriteStatus(friendName) {
      const identifiedFriend = this.friends.find((friend) => {
        return friend.name === friendName; // Add return statement here
      });
      identifiedFriend.isFavorite = !identifiedFriend.isFavorite;
    },
  },
  computed: {},
  watch: {},
};
</script>


n your friend-contact component, you have the "toggle favorite" button:

html
Copy code
<button @click="toggleFavorite">toggle favorite</button>
In the script section, you have the toggleFavorite method:

javascript
Copy code
methods: {
  toggleFavorite() {
    this.$emit("toggle-favorite", this.id);
  },
  // Other methods...
},
Here's how it works step by step:

Button Click:

When the "toggle favorite" button is clicked in the friend-contact component, the toggleFavorite method is triggered.
Emitting Event:

Inside the toggleFavorite method, this.$emit("toggle-favorite", this.id); is used to emit a custom event named "toggle-favorite."
The first argument of this.$emit is the event name ("toggle-favorite").
The second argument is the data you want to pass along with the event. In this case, it's this.id, which represents the unique identifier of the friend.
MyFriends Component
In your MyFriends component, you listen for the "toggle-favorite" event:

html
Copy code
<friend-contact
  v-for="friend in friends"
  :key="friend.id"
  :id="friend.id"
  v-bind:name="friend.name"
  :mobile-number="friend.mobileNumber"
  :email-address="friend.email"
  :is-favorite="friend.isFavorite"
  @toggle-favorite="toggleFavoriteStatus"
></friend-contact>
In the script section, you have the toggleFavoriteStatus method:

javascript
Copy code
methods: {
  toggleFavoriteStatus(friendId) {
    const identifiedFriend = this.friends.find((friend) => friend.id === friendId);
    identifiedFriend.isFavorite = !identifiedFriend.isFavorite;
  },
  // Other methods...
},
Here's how it works in the parent component:

Listening for Event:

The @toggle-favorite="toggleFavoriteStatus" in the friend-contact component indicates that the toggleFavoriteStatus method in the MyFriends component should be called when the "toggle-favorite" event is emitted.
Handling Event:

The toggleFavoriteStatus method receives the friendId as an argument, which is the value emitted in this.$emit("toggle-favorite", this.id);.
Inside the method, it finds the friend in the friends array whose id matches the emitted friendId.
It then toggles the isFavorite property of that friend.
So, in summary, the emit method is used to trigger a custom event in the child component (friend-contact), passing along the friend's id as data. The parent component (MyFriends) listens for this event and handles it by updating the corresponding friend's isFavorite status. This allows for communication between the child and parent components in Vue.js.




